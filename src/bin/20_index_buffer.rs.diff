--- a/19_staging_buffer.rs
+++ b/20_index_buffer.rs
@@ -53,6 +53,7 @@ use vulkano::buffer::{
     immutable::ImmutableBuffer,
     BufferUsage,
     BufferAccess,
+    TypedBufferAccess,
 };
 
 const WIDTH: u32 = 800;
@@ -101,14 +102,19 @@ impl Vertex {
 }
 impl_vertex!(Vertex, pos, color);
 
-fn vertices() -> [Vertex; 3] {
+fn vertices() -> [Vertex; 4] {
     [
-        Vertex::new([0.0, -0.5], [1.0, 1.0, 1.0]),
-        Vertex::new([0.5, 0.5], [0.0, 1.0, 0.0]),
-        Vertex::new([-0.5, 0.5], [0.0, 0.0, 1.])
+        Vertex::new([-0.5, -0.5], [1.0, 0.0, 0.0]),
+        Vertex::new([0.5, -0.5], [0.0, 1.0, 0.0]),
+        Vertex::new([0.5, 0.5], [0.0, 0.0, 1.0]),
+        Vertex::new([-0.5, 0.5], [1.0, 1.0, 1.0])
     ]
 }
 
+fn indices() -> [u16; 6] {
+    [0, 1, 2, 2, 3, 0]
+}
+
 struct HelloTriangleApplication {
     instance: Arc<Instance>,
     #[allow(unused)]
@@ -132,6 +138,7 @@ struct HelloTriangleApplication {
     swap_chain_framebuffers: Vec<Arc<FramebufferAbstract + Send + Sync>>,
 
     vertex_buffer: Arc<BufferAccess + Send + Sync>,
+    index_buffer: Arc<TypedBufferAccess<Content=[u16]> + Send + Sync>,
     command_buffers: Vec<Arc<AutoCommandBuffer>>,
 
     previous_frame_end: Option<Box<GpuFuture>>,
@@ -157,6 +164,7 @@ impl HelloTriangleApplication {
         let swap_chain_framebuffers = Self::create_framebuffers(&swap_chain_images, &render_pass);
 
         let vertex_buffer = Self::create_vertex_buffer(&graphics_queue);
+        let index_buffer = Self::create_index_buffer(&graphics_queue);
 
         let previous_frame_end = Some(Self::create_sync_objects(&device));
 
@@ -182,6 +190,7 @@ impl HelloTriangleApplication {
             swap_chain_framebuffers,
 
             vertex_buffer,
+            index_buffer,
             command_buffers: vec![],
 
             previous_frame_end,
@@ -459,6 +468,15 @@ impl HelloTriangleApplication {
         buffer
     }
 
+    fn create_index_buffer(graphics_queue: &Arc<Queue>) -> Arc<TypedBufferAccess<Content=[u16]> + Send + Sync> {
+        let (buffer, future) = ImmutableBuffer::from_iter(
+            indices().iter().cloned(), BufferUsage::index_buffer(),
+            graphics_queue.clone())
+            .unwrap();
+        future.flush().unwrap();
+        buffer
+    }
+
     fn create_command_buffers(&mut self) {
         let queue_family = self.graphics_queue.family();
         self.command_buffers = self.swap_chain_framebuffers.iter()
@@ -467,8 +485,9 @@ impl HelloTriangleApplication {
                     .unwrap()
                     .begin_render_pass(framebuffer.clone(), false, vec![[0.0, 0.0, 0.0, 1.0].into()])
                     .unwrap()
-                    .draw(self.graphics_pipeline.clone(), &DynamicState::none(),
-                        vec![self.vertex_buffer.clone()], (), ())
+                    .draw_indexed(self.graphics_pipeline.clone(), &DynamicState::none(),
+                        vec![self.vertex_buffer.clone()],
+                        self.index_buffer.clone(), (), ())
                     .unwrap()
                     .end_render_pass()
                     .unwrap()
