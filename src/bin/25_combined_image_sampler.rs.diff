--- a/24_image_sampler.rs
+++ b/25_combined_image_sampler.rs
@@ -67,7 +67,9 @@ use vulkano::buffer::{
 use vulkano::descriptor::descriptor_set::{
     FixedSizeDescriptorSetsPool,
     FixedSizeDescriptorSet,
-    PersistentDescriptorSetBuf
+    PersistentDescriptorSetBuf,
+    PersistentDescriptorSetImg,
+    PersistentDescriptorSetSampler,
 };
 
 use image::GenericImageView;
@@ -121,13 +123,14 @@ impl QueueFamilyIndices {
 struct Vertex {
     pos: [f32; 2],
     color: [f32; 3],
+    tex: [f32; 2],
 }
 impl Vertex {
-    fn new(pos: [f32; 2], color: [f32; 3]) -> Self {
-        Self { pos, color }
+    fn new(pos: [f32; 2], color: [f32; 3], tex: [f32; 2]) -> Self {
+        Self { pos, color, tex }
     }
 }
-impl_vertex!(Vertex, pos, color);
+impl_vertex!(Vertex, pos, color, tex);
 
 #[allow(dead_code)]
 #[derive(Copy, Clone)]
@@ -139,10 +142,10 @@ struct UniformBufferObject {
 
 fn vertices() -> [Vertex; 4] {
     [
-        Vertex::new([-0.5, -0.5], [1.0, 0.0, 0.0]),
-        Vertex::new([0.5, -0.5], [0.0, 1.0, 0.0]),
-        Vertex::new([0.5, 0.5], [0.0, 0.0, 1.0]),
-        Vertex::new([-0.5, 0.5], [1.0, 1.0, 1.0])
+        Vertex::new([-0.5, -0.5], [1.0, 0.0, 0.0], [1.0, 0.0]),
+        Vertex::new([0.5, -0.5], [0.0, 1.0, 0.0], [0.0, 0.0]),
+        Vertex::new([0.5, 0.5], [0.0, 0.0, 1.0], [0.0, 1.0]),
+        Vertex::new([-0.5, 0.5], [1.0, 1.0, 1.0], [1.0, 1.0])
     ]
 }
 
@@ -150,7 +153,9 @@ fn indices() -> [u16; 6] {
     [0, 1, 2, 2, 3, 0]
 }
 
-type DescriptorSetResources = ((), PersistentDescriptorSetBuf<Arc<CpuAccessibleBuffer<UniformBufferObject>>>);
+type DescriptorSetUBO = PersistentDescriptorSetBuf<Arc<CpuAccessibleBuffer<UniformBufferObject>>>;
+type DescriptorSetImage = PersistentDescriptorSetImg<Arc<ImmutableImage<Format>>>;
+type DescriptorSetResources = ((((), DescriptorSetUBO), DescriptorSetImage), PersistentDescriptorSetSampler);
 
 struct HelloTriangleApplication {
     instance: Arc<Instance>,
@@ -174,11 +179,6 @@ struct HelloTriangleApplication {
 
     swap_chain_framebuffers: Vec<Arc<FramebufferAbstract + Send + Sync>>,
 
-    #[allow(dead_code)]
-    texture_image: Arc<ImmutableImage<Format>>,
-    #[allow(dead_code)]
-    image_sampler: Arc<Sampler>,
-
     vertex_buffer: Arc<BufferAccess + Send + Sync>,
     index_buffer: Arc<TypedBufferAccess<Content=[u16]> + Send + Sync>,
     uniform_buffers: Vec<Arc<CpuAccessibleBuffer<UniformBufferObject>>>,
@@ -222,7 +222,7 @@ impl HelloTriangleApplication {
         let uniform_buffers = Self::create_uniform_buffers(&device, swap_chain_images.len(), start_time, swap_chain.dimensions());
 
         let descriptor_sets_pool = Self::create_descriptor_pool(&graphics_pipeline);
-        let descriptor_sets = Self::create_descriptor_sets(&descriptor_sets_pool, &uniform_buffers);
+        let descriptor_sets = Self::create_descriptor_sets(&descriptor_sets_pool, &uniform_buffers, &texture_image, &image_sampler);
 
         let previous_frame_end = Some(Self::create_sync_objects(&device));
 
@@ -247,9 +247,6 @@ impl HelloTriangleApplication {
 
             swap_chain_framebuffers,
 
-            texture_image,
-            image_sampler,
-
             vertex_buffer,
             index_buffer,
             uniform_buffers,
@@ -468,14 +465,14 @@ impl HelloTriangleApplication {
         mod vertex_shader {
             vulkano_shaders::shader! {
                ty: "vertex",
-               path: "src/bin/21_shader_uniformbuffer.vert"
+               path: "src/bin/25_shader_texturesampler.vert"
             }
         }
 
         mod fragment_shader {
             vulkano_shaders::shader! {
                 ty: "fragment",
-                path: "src/bin/21_shader_uniformbuffer.frag"
+                path: "src/bin/25_shader_texturesampler.frag"
             }
         }
 
@@ -606,8 +603,9 @@ impl HelloTriangleApplication {
     fn create_descriptor_sets(
         pool: &Arc<Mutex<FixedSizeDescriptorSetsPool<Arc<GraphicsPipelineAbstract + Send + Sync>>>>,
         uniform_buffers: &[Arc<CpuAccessibleBuffer<UniformBufferObject>>],
-    ) -> Vec<Arc<FixedSizeDescriptorSet<Arc<GraphicsPipelineAbstract + Send + Sync>, DescriptorSetResources>>>
-    {
+        texture_image: &Arc<ImmutableImage<Format>>,
+        image_sampler: &Arc<Sampler>,
+    ) -> Vec<Arc<FixedSizeDescriptorSet<Arc<GraphicsPipelineAbstract + Send + Sync>, DescriptorSetResources>>> {
         uniform_buffers
             .iter()
             .map(|uniform_buffer|
@@ -618,6 +616,8 @@ impl HelloTriangleApplication {
                         .next()
                         .add_buffer(uniform_buffer.clone())
                         .unwrap()
+                        .add_sampled_image(texture_image.clone(), image_sampler.clone())
+                        .unwrap()
                         .build()
                         .unwrap()
                 )
