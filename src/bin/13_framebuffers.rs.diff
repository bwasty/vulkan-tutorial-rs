--- a/12_graphics_pipeline_complete.rs
+++ b/13_framebuffers.rs
@@ -42,6 +42,8 @@ use vulkano::pipeline::{
 use vulkano::framebuffer::{
     RenderPassAbstract,
     Subpass,
+    FramebufferAbstract,
+    Framebuffer,
 };
 use vulkano::descriptor::PipelineLayoutAbstract;
 
@@ -104,6 +106,8 @@ struct HelloTriangleApplication {
     // works when the concrete type of the graphics pipeline is visible
     // to the command buffer.
     graphics_pipeline: Arc<ConcreteGraphicsPipeline>,
+
+    swap_chain_framebuffers: Vec<Arc<FramebufferAbstract + Send + Sync>>,
 }
 
 impl HelloTriangleApplication {
@@ -122,6 +126,8 @@ impl HelloTriangleApplication {
         let render_pass = Self::create_render_pass(&device, swap_chain.format());
         let graphics_pipeline = Self::create_graphics_pipeline(&device, swap_chain.dimensions(), &render_pass);
 
+        let swap_chain_framebuffers = Self::create_framebuffers(&swap_chain_images, &render_pass);
+
         Self {
             instance,
             debug_callback,
@@ -140,6 +146,8 @@ impl HelloTriangleApplication {
 
             render_pass,
             graphics_pipeline,
+
+            swap_chain_framebuffers,
         }
     }
 
@@ -388,6 +396,20 @@ impl HelloTriangleApplication {
         )
     }
 
+    fn create_framebuffers(
+        swap_chain_images: &Vec<Arc<SwapchainImage<Window>>>,
+        render_pass: &Arc<RenderPassAbstract + Send + Sync>
+    ) -> Vec<Arc<FramebufferAbstract + Send + Sync>> {
+        swap_chain_images.iter()
+            .map(|image| {
+                let fba: Arc<FramebufferAbstract + Send + Sync> = Arc::new(Framebuffer::start(render_pass.clone())
+                    .add(image.clone()).unwrap()
+                    .build().unwrap());
+                fba
+            }
+        ).collect::<Vec<_>>()
+    }
+
     fn find_queue_families(surface: &Arc<Surface<Window>>, device: &PhysicalDevice) -> QueueFamilyIndices {
         let mut indices = QueueFamilyIndices::new();
         // TODO: replace index with id to simplify?
