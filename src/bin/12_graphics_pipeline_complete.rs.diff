--- a/11_render_passes.rs
+++ b/12_graphics_pipeline_complete.rs
@@ -38,7 +38,9 @@ use vulkano::pipeline::{
 };
 use vulkano::framebuffer::{
     RenderPassAbstract,
+    Subpass,
 };
+use vulkano::descriptor::PipelineLayoutAbstract;
 
 const WIDTH: u32 = 800;
 const HEIGHT: u32 = 600;
@@ -74,6 +76,8 @@ impl QueueFamilyIndices {
     }
 }
 
+type ConcreteGraphicsPipeline = GraphicsPipeline<BufferlessDefinition, Box<PipelineLayoutAbstract + Send + Sync + 'static>, Arc<RenderPassAbstract + Send + Sync + 'static>>;
+
 #[allow(unused)]
 struct HelloTriangleApplication {
     instance: Arc<Instance>,
@@ -92,6 +96,11 @@ struct HelloTriangleApplication {
     swap_chain_images: Vec<Arc<SwapchainImage<Window>>>,
 
     render_pass: Arc<RenderPassAbstract + Send + Sync>,
+    // NOTE: We need to the full type of
+    // self.graphics_pipeline, because `BufferlessVertices` only
+    // works when the concrete type of the graphics pipeline is visible
+    // to the command buffer.
+    graphics_pipeline: Arc<ConcreteGraphicsPipeline>,
 }
 
 impl HelloTriangleApplication {
@@ -108,7 +117,7 @@ impl HelloTriangleApplication {
             &device, &graphics_queue, &present_queue);
 
         let render_pass = Self::create_render_pass(&device, swap_chain.format());
-        Self::create_graphics_pipeline(&device, swap_chain.dimensions());
+        let graphics_pipeline = Self::create_graphics_pipeline(&device, swap_chain.dimensions(), &render_pass);
 
         Self {
             instance,
@@ -127,6 +136,7 @@ impl HelloTriangleApplication {
             swap_chain_images,
 
             render_pass,
+            graphics_pipeline,
         }
     }
 
@@ -324,7 +334,8 @@ impl HelloTriangleApplication {
     fn create_graphics_pipeline(
         device: &Arc<Device>,
         swap_chain_extent: [u32; 2],
-    ) {
+        render_pass: &Arc<RenderPassAbstract + Send + Sync>,
+    ) -> Arc<ConcreteGraphicsPipeline> {
         mod vertex_shader {
             vulkano_shaders::shader! {
                ty: "vertex",
@@ -351,7 +362,7 @@ impl HelloTriangleApplication {
             depth_range: 0.0 .. 1.0,
         };
 
-        let _pipeline_builder = Arc::new(GraphicsPipeline::start()
+        Arc::new(GraphicsPipeline::start()
             .vertex_input(BufferlessDefinition {})
             .vertex_shader(vert_shader_module.main_entry_point(), ())
             .triangle_list()
@@ -366,7 +377,10 @@ impl HelloTriangleApplication {
             .front_face_clockwise()
             // NOTE: no depth_bias here, but on pipeline::raster::Rasterization
             .blend_pass_through() // = default
-        );
+            .render_pass(Subpass::from(render_pass.clone(), 0).unwrap())
+            .build(device.clone())
+            .unwrap()
+        )
     }
 
     fn find_queue_families(surface: &Arc<Surface<Window>>, device: &PhysicalDevice) -> QueueFamilyIndices {
