--- a/23_images.rs
+++ b/24_image_sampler.rs
@@ -69,6 +69,7 @@ use vulkano::descriptor::descriptor_set::{
 };
 
 use image::GenericImageView;
+use vulkano::sampler::Sampler;
 
 const WIDTH: u32 = 800;
 const HEIGHT: u32 = 600;
@@ -161,6 +162,7 @@ struct HelloTriangleApplication {
     swap_chain_framebuffers: Vec<Arc<FramebufferAbstract + Send + Sync>>,
 
     texture_image: Arc<ImmutableImage<Format>>,
+    image_sampler: Arc<Sampler>,
 
     vertex_buffer: Arc<BufferAccess + Send + Sync>,
     index_buffer: Arc<TypedBufferAccess<Content=[u16]> + Send + Sync>,
@@ -198,6 +200,7 @@ impl HelloTriangleApplication {
         let start_time = Instant::now();
 
         let texture_image = Self::create_texture_image(&graphics_queue);
+        let image_sampler = Self::create_image_sampler(&device);
 
         let vertex_buffer = Self::create_vertex_buffer(&graphics_queue);
         let index_buffer = Self::create_index_buffer(&graphics_queue);
@@ -230,6 +233,7 @@ impl HelloTriangleApplication {
             swap_chain_framebuffers,
 
             texture_image,
+            image_sampler,
 
             vertex_buffer,
             index_buffer,
@@ -527,6 +531,10 @@ impl HelloTriangleApplication {
         return image_view;
     }
 
+    fn create_image_sampler(device: &Arc<Device>) -> Arc<Sampler> {
+        Sampler::simple_repeat_linear(device.clone())
+    }
+
     fn create_vertex_buffer(graphics_queue: &Arc<Queue>) -> Arc<BufferAccess + Send + Sync> {
         let (buffer, future) = ImmutableBuffer::from_iter(
             vertices().iter().cloned(), BufferUsage::vertex_buffer(),
